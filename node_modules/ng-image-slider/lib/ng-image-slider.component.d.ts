import { ChangeDetectorRef, OnInit, OnChanges, DoCheck, SimpleChanges, AfterViewInit, OnDestroy, EventEmitter, ElementRef } from '@angular/core';
import { NgImageSliderService } from './ng-image-slider.service';
import * as ɵngcc0 from '@angular/core';
export declare class NgImageSliderComponent implements OnChanges, OnInit, DoCheck, AfterViewInit, OnDestroy {
    private cdRef;
    private platformId;
    imageSliderService: NgImageSliderService;
    private elRef;
    sliderMainDivWidth: number;
    imageParentDivWidth: number;
    imageObj: Array<object>;
    ligthboxImageObj: Array<object>;
    totalImages: number;
    leftPos: number;
    effectStyle: string;
    speed: number;
    sliderPrevDisable: boolean;
    sliderNextDisable: boolean;
    slideImageCount: number;
    sliderImageWidth: number;
    sliderImageReceivedWidth: number | string;
    sliderImageHeight: number;
    sliderImageReceivedHeight: number | string;
    sliderImageSizeWithPadding: number;
    autoSlideCount: number;
    autoSlideInterval: any;
    showArrowButton: boolean;
    textDirection: string;
    imageMargin: number;
    private swipeCoord?;
    private swipeTime?;
    sliderMain: any;
    imageDiv: any;
    imageSize: any;
    infinite: boolean;
    imagePopup: boolean;
    direction: string;
    animationSpeed: number;
    images: Array<object>;
    slideImage: any;
    autoSlide: any;
    showArrow: any;
    videoAutoPlay: boolean;
    paginationShow: boolean;
    arrowKeyMove: boolean;
    manageImageRatio: boolean;
    imageClick: EventEmitter<number>;
    arrowClick: EventEmitter<string>;
    lightboxArrowClick: EventEmitter<object>;
    currentImageSrc: string;
    currentImageTitle: string;
    ligthboxShow: boolean;
    activeImageIndex: number;
    visiableImageIndex: number;
    lightboxNextDisable: boolean;
    lightboxPrevDisable: boolean;
    showImage: boolean;
    onResize(event: any): void;
    handleKeyboardEvent(event: KeyboardEvent): void;
    constructor(cdRef: ChangeDetectorRef, platformId: Object, imageSliderService: NgImageSliderService, elRef: ElementRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    setSliderImages(imgObj: any): void;
    setSliderWidth(): void;
    fullView(): void;
    imageOnClick(index: any): void;
    imageAutoSlide(): void;
    imageMouseEnterHandler(): void;
    prev(): void;
    next(): void;
    prevImg(): void;
    nextImg(): void;
    infinitePrevImg(): void;
    infiniteNextImg(): void;
    getVisiableIndex(): void;
    /**
     * Disable slider left/right arrow when image moving
     */
    sliderArrowDisableTeam(): void;
    nextPrevSliderButtonDisable(): void;
    showLightbox(): void;
    close(): void;
    lightboxArrowClickHandler(event: any): void;
    /**
     * Swipe event handler
     * Reference from https://stackoverflow.com/a/44511007/2067646
     */
    swipe(e: TouchEvent, when: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgImageSliderComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgImageSliderComponent, "ng-image-slider", never, {
    "infinite": "infinite";
    "imagePopup": "imagePopup";
    "images": "images";
    "videoAutoPlay": "videoAutoPlay";
    "paginationShow": "paginationShow";
    "arrowKeyMove": "arrowKeyMove";
    "manageImageRatio": "manageImageRatio";
    "imageSize": "imageSize";
    "direction": "direction";
    "animationSpeed": "animationSpeed";
    "slideImage": "slideImage";
    "autoSlide": "autoSlide";
    "showArrow": "showArrow";
}, {
    "imageClick": "imageClick";
    "arrowClick": "arrowClick";
    "lightboxArrowClick": "lightboxArrowClick";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctaW1hZ2Utc2xpZGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZy1pbWFnZS1zbGlkZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3RkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgT25Jbml0LCBPbkNoYW5nZXMsIERvQ2hlY2ssIFNpbXBsZUNoYW5nZXMsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0ltYWdlU2xpZGVyU2VydmljZSB9IGZyb20gJy4vbmctaW1hZ2Utc2xpZGVyLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdJbWFnZVNsaWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBEb0NoZWNrLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgY2RSZWY7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xuICAgIGltYWdlU2xpZGVyU2VydmljZTogTmdJbWFnZVNsaWRlclNlcnZpY2U7XG4gICAgcHJpdmF0ZSBlbFJlZjtcbiAgICBzbGlkZXJNYWluRGl2V2lkdGg6IG51bWJlcjtcbiAgICBpbWFnZVBhcmVudERpdldpZHRoOiBudW1iZXI7XG4gICAgaW1hZ2VPYmo6IEFycmF5PG9iamVjdD47XG4gICAgbGlndGhib3hJbWFnZU9iajogQXJyYXk8b2JqZWN0PjtcbiAgICB0b3RhbEltYWdlczogbnVtYmVyO1xuICAgIGxlZnRQb3M6IG51bWJlcjtcbiAgICBlZmZlY3RTdHlsZTogc3RyaW5nO1xuICAgIHNwZWVkOiBudW1iZXI7XG4gICAgc2xpZGVyUHJldkRpc2FibGU6IGJvb2xlYW47XG4gICAgc2xpZGVyTmV4dERpc2FibGU6IGJvb2xlYW47XG4gICAgc2xpZGVJbWFnZUNvdW50OiBudW1iZXI7XG4gICAgc2xpZGVySW1hZ2VXaWR0aDogbnVtYmVyO1xuICAgIHNsaWRlckltYWdlUmVjZWl2ZWRXaWR0aDogbnVtYmVyIHwgc3RyaW5nO1xuICAgIHNsaWRlckltYWdlSGVpZ2h0OiBudW1iZXI7XG4gICAgc2xpZGVySW1hZ2VSZWNlaXZlZEhlaWdodDogbnVtYmVyIHwgc3RyaW5nO1xuICAgIHNsaWRlckltYWdlU2l6ZVdpdGhQYWRkaW5nOiBudW1iZXI7XG4gICAgYXV0b1NsaWRlQ291bnQ6IG51bWJlcjtcbiAgICBhdXRvU2xpZGVJbnRlcnZhbDogYW55O1xuICAgIHNob3dBcnJvd0J1dHRvbjogYm9vbGVhbjtcbiAgICB0ZXh0RGlyZWN0aW9uOiBzdHJpbmc7XG4gICAgaW1hZ2VNYXJnaW46IG51bWJlcjtcbiAgICBwcml2YXRlIHN3aXBlQ29vcmQ/O1xuICAgIHByaXZhdGUgc3dpcGVUaW1lPztcbiAgICBzbGlkZXJNYWluOiBhbnk7XG4gICAgaW1hZ2VEaXY6IGFueTtcbiAgICBpbWFnZVNpemU6IGFueTtcbiAgICBpbmZpbml0ZTogYm9vbGVhbjtcbiAgICBpbWFnZVBvcHVwOiBib29sZWFuO1xuICAgIGRpcmVjdGlvbjogc3RyaW5nO1xuICAgIGFuaW1hdGlvblNwZWVkOiBudW1iZXI7XG4gICAgaW1hZ2VzOiBBcnJheTxvYmplY3Q+O1xuICAgIHNsaWRlSW1hZ2U6IGFueTtcbiAgICBhdXRvU2xpZGU6IGFueTtcbiAgICBzaG93QXJyb3c6IGFueTtcbiAgICB2aWRlb0F1dG9QbGF5OiBib29sZWFuO1xuICAgIHBhZ2luYXRpb25TaG93OiBib29sZWFuO1xuICAgIGFycm93S2V5TW92ZTogYm9vbGVhbjtcbiAgICBtYW5hZ2VJbWFnZVJhdGlvOiBib29sZWFuO1xuICAgIGltYWdlQ2xpY2s6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIGFycm93Q2xpY2s6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIGxpZ2h0Ym94QXJyb3dDbGljazogRXZlbnRFbWl0dGVyPG9iamVjdD47XG4gICAgY3VycmVudEltYWdlU3JjOiBzdHJpbmc7XG4gICAgY3VycmVudEltYWdlVGl0bGU6IHN0cmluZztcbiAgICBsaWd0aGJveFNob3c6IGJvb2xlYW47XG4gICAgYWN0aXZlSW1hZ2VJbmRleDogbnVtYmVyO1xuICAgIHZpc2lhYmxlSW1hZ2VJbmRleDogbnVtYmVyO1xuICAgIGxpZ2h0Ym94TmV4dERpc2FibGU6IGJvb2xlYW47XG4gICAgbGlnaHRib3hQcmV2RGlzYWJsZTogYm9vbGVhbjtcbiAgICBzaG93SW1hZ2U6IGJvb2xlYW47XG4gICAgb25SZXNpemUoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgaGFuZGxlS2V5Ym9hcmRFdmVudChldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgY29uc3RydWN0b3IoY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLCBwbGF0Zm9ybUlkOiBPYmplY3QsIGltYWdlU2xpZGVyU2VydmljZTogTmdJbWFnZVNsaWRlclNlcnZpY2UsIGVsUmVmOiBFbGVtZW50UmVmKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XG4gICAgc2V0U2xpZGVySW1hZ2VzKGltZ09iajogYW55KTogdm9pZDtcbiAgICBzZXRTbGlkZXJXaWR0aCgpOiB2b2lkO1xuICAgIGZ1bGxWaWV3KCk6IHZvaWQ7XG4gICAgaW1hZ2VPbkNsaWNrKGluZGV4OiBhbnkpOiB2b2lkO1xuICAgIGltYWdlQXV0b1NsaWRlKCk6IHZvaWQ7XG4gICAgaW1hZ2VNb3VzZUVudGVySGFuZGxlcigpOiB2b2lkO1xuICAgIHByZXYoKTogdm9pZDtcbiAgICBuZXh0KCk6IHZvaWQ7XG4gICAgcHJldkltZygpOiB2b2lkO1xuICAgIG5leHRJbWcoKTogdm9pZDtcbiAgICBpbmZpbml0ZVByZXZJbWcoKTogdm9pZDtcbiAgICBpbmZpbml0ZU5leHRJbWcoKTogdm9pZDtcbiAgICBnZXRWaXNpYWJsZUluZGV4KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRGlzYWJsZSBzbGlkZXIgbGVmdC9yaWdodCBhcnJvdyB3aGVuIGltYWdlIG1vdmluZ1xuICAgICAqL1xuICAgIHNsaWRlckFycm93RGlzYWJsZVRlYW0oKTogdm9pZDtcbiAgICBuZXh0UHJldlNsaWRlckJ1dHRvbkRpc2FibGUoKTogdm9pZDtcbiAgICBzaG93TGlnaHRib3goKTogdm9pZDtcbiAgICBjbG9zZSgpOiB2b2lkO1xuICAgIGxpZ2h0Ym94QXJyb3dDbGlja0hhbmRsZXIoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU3dpcGUgZXZlbnQgaGFuZGxlclxuICAgICAqIFJlZmVyZW5jZSBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80NDUxMTAwNy8yMDY3NjQ2XG4gICAgICovXG4gICAgc3dpcGUoZTogVG91Y2hFdmVudCwgd2hlbjogc3RyaW5nKTogdm9pZDtcbn1cbiJdfQ==